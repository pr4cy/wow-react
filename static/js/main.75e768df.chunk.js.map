{"version":3,"sources":["CardView.js","MemoryCards.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["CardView","props","onClick","bind","this","matched","imageUp","id","image","imPath","className","src","alt","Component","MemoryCards","cards","NUM_IMAGES","i","card1","card2","push","shuffle","getCard","id1","id2","Game","state","onCardClicked","onPlayAgain","memoryCards","initGame","generateCardSet","setState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","map","c","flipCard","clearTimeout","timeout","clearCards","cardsHaveIdenticalImages","setCardAsMatched","setTimeout","cardViews","getCardViews","gameStatus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA4CeA,G,uDAxCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,QAAU,EAAKA,QAAQC,KAAb,gBAFA,E,sDAOVC,KAAKH,MAAMI,SAAYD,KAAKH,MAAMK,SACnCF,KAAKH,MAAMC,QAAQE,KAAKH,MAAMM,GAAIH,KAAKH,MAAMO,S,+BAKjD,IAAIC,EAAS,YACTC,EAAY,OAmBhB,OAlBIN,KAAKH,MAAMK,SACXI,GAAuB,YACvBD,EAASA,EAASL,KAAKH,MAAMO,MAAQ,QAGrCC,GAAkB,WAMlBL,KAAKH,MAAMI,UAEXK,GAAuB,YAOvB,qBAAKA,UAAWA,EAAWC,IAAG,UAAKF,GAAUG,IAAI,GAAGV,QAASE,KAAKF,c,GApCvDW,c,iBCwDRC,E,WAxDX,aAAe,oBACXV,KAAKW,MAAQ,GACbX,KAAKY,WAAa,G,8DAIlBZ,KAAKW,MAAQ,GAEb,IADA,IAAIR,EAAK,EACAU,EAAI,EAAGA,GAAKb,KAAKY,WAAYC,IAAK,CACvC,IAAMC,EAAQ,CACVX,GAAIA,EACJC,MAAOS,EACPX,SAAS,EACTD,SAAS,GAGPc,EAAQ,CACVZ,KAFJA,EAGIC,MAAOS,EACPX,SAAS,EACTD,SAAS,GAEbD,KAAKW,MAAMK,KAAKF,GAChBd,KAAKW,MAAMK,KAAKD,GAChBZ,IAGJc,IAAQjB,KAAKW,S,8BAGTR,GACJ,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAIb,KAAKY,WAAYC,IACrC,GAAIb,KAAKW,MAAME,GAAGV,KAAOA,EACrB,OAAOH,KAAKW,MAAME,K,+BAKrBV,EAAID,GACTF,KAAKkB,QAAQf,GAAID,QAAUA,I,uCAGdC,EAAIF,GACjBD,KAAKkB,QAAQf,GAAIF,QAAUA,I,+CAGNkB,EAAKC,GAC1B,OAAIpB,KAAKkB,QAAQC,GAAKf,QAAUJ,KAAKkB,QAAQE,GAAKhB,U,KCgF3CiB,E,kDAzHX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IAHVyB,MAAQ,GAIJ,EAAKC,cAAgB,EAAKA,cAAcxB,KAAnB,gBACrB,EAAKyB,YAAc,EAAKA,YAAYzB,KAAjB,gBACnB,EAAK0B,YAAc,IAAIf,EAJR,E,gEAQfV,KAAK0B,a,iCAIL1B,KAAKyB,YAAYE,kBACjB3B,KAAK4B,SAAS,CACVC,OAAQ,EACRC,WAAY,EACZC,oBAAqB,EACrBC,aAASC,EACTC,cAAUD,M,qCAIF,IAAD,OASX,OARkBjC,KAAKyB,YAAYd,MAAMwB,KAAI,SAAAC,GAAC,OAC1C,cAAC,EAAD,CACAjC,GAAIiC,EAAEjC,GACNC,MAAOgC,EAAEhC,MACTF,QAASkC,EAAElC,QACXD,QAASmC,EAAEnC,QACXH,QAAS,EAAKyB,eALCa,EAAEjC,S,iCAUdgB,EAAKC,GAC2B,IAAnCpB,KAAKsB,MAAMS,sBAGf/B,KAAKyB,YAAYY,SAASrC,KAAKsB,MAAMU,SAAS,GAC9ChC,KAAKyB,YAAYY,SAASrC,KAAKsB,MAAMY,UAAU,GAC/ClC,KAAK4B,SAAS,CACVI,aAASC,EACTC,cAAUD,EACVF,oBAAqB,EACrBF,OAAQ7B,KAAKsB,MAAMO,OAAS,O,oCAItB1B,EAAIC,GAAQ,IAAD,OACkB,IAAnCJ,KAAKsB,MAAMS,qBAAgE,IAAnC/B,KAAKsB,MAAMS,qBACZ,IAAnC/B,KAAKsB,MAAMS,sBACXO,aAAatC,KAAKuC,SAClBvC,KAAKwC,WAAWxC,KAAKsB,MAAMU,QAAShC,KAAKsB,MAAMY,WAEnDlC,KAAKyB,YAAYY,SAASlC,GAAI,GAC9BH,KAAK4B,SAAS,CACVI,QAAS7B,EACT4B,oBAAqB,KAEiB,IAAnC/B,KAAKsB,MAAMS,sBAClB/B,KAAKyB,YAAYY,SAASlC,GAAI,GAE9BH,KAAK4B,SAAS,CACVM,SAAU/B,EACV4B,oBAAqB,IAGrB/B,KAAKyB,YAAYgB,yBAAyBtC,EAAIH,KAAKsB,MAAMU,UACzDhC,KAAKyB,YAAYiB,iBAAiB1C,KAAKsB,MAAMU,SAAS,GACtDhC,KAAKyB,YAAYiB,iBAAiBvC,GAAI,GACtCH,KAAK4B,SAAS,CACVE,WAAY9B,KAAKsB,MAAMQ,WAAa,EACpCE,aAASC,EACTC,cAAUD,EACVJ,OAAQ7B,KAAKsB,MAAMO,OAAS,EAC5BE,oBAAqB,KAIzB/B,KAAKuC,QAAUI,YAAW,WACtB,EAAKH,WAAW,EAAKlB,MAAMU,QAAS,EAAKV,MAAMY,YAChD,Q,oCAOXlC,KAAK0B,a,+BAIL,IAAMkB,EAAY5C,KAAK6C,eACnBC,EAAa,sBAAKxC,UAAU,cAAf,UACb,0CAAaN,KAAKsB,MAAMO,UACxB,oDAAuB7B,KAAKsB,MAAMQ,iBAUtC,OAPI9B,KAAKsB,MAAMQ,aAAe9B,KAAKyB,YAAYb,aAC3CkC,EAAa,sBAAKxC,UAAU,cAAf,UACT,iEACA,wCAAWN,KAAKsB,MAAMO,OAAS,EAA/B,YACA,8BAAK,wBAAQ/B,QAASE,KAAKwB,YAAtB,+BAIT,sBAAKlB,UAAU,OAAf,UACI,wBAAQA,UAAU,cAAlB,SACI,qBAAKA,UAAU,aAAf,+CAEJ,8BACKwC,IAEL,qBAAKxC,UAAU,gBAAf,SACKsC,W,GArHFnC,aCMJsC,MAPf,WAEI,OACI,cAAC,EAAD,KCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75e768df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Game.css';\r\n\r\nclass CardView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    onClick() {\r\n        \r\n        if (!this.props.matched && !this.props.imageUp) {\r\n            this.props.onClick(this.props.id, this.props.image);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let imPath = './images/';\r\n        let className = 'Card';\r\n        if (this.props.imageUp) {\r\n            className = className +' flipcard';\r\n            imPath = imPath + this.props.image + '.png';\r\n            \r\n        } else {\r\n            imPath = imPath + 'back.png';\r\n            \r\n        }\r\n\r\n        \r\n        \r\n        if (this.props.matched) {\r\n            \r\n            className = className +' Matched';\r\n            \r\n            \r\n        }\r\n\r\n        return (\r\n            \r\n            <img className={className} src={`${imPath}`} alt='' onClick={this.onClick} />\r\n        );\r\n    };\r\n};\r\n\r\nexport default CardView;\r\n","import shuffle from 'shuffle-array';\r\n\r\nclass MemoryCards {\r\n    constructor() {\r\n        this.cards = [];\r\n        this.NUM_IMAGES = 10;\r\n    }\r\n\r\n    generateCardSet() {\r\n        this.cards = [];\r\n        let id = 1;\r\n        for (let i = 1; i <= this.NUM_IMAGES; i++) {\r\n            const card1 = {\r\n                id: id,\r\n                image: i,\r\n                imageUp: false,\r\n                matched: false\r\n            };\r\n            id++;\r\n            const card2 = {\r\n                id: id,\r\n                image: i,\r\n                imageUp: false,\r\n                matched: false\r\n            };\r\n            this.cards.push(card1);\r\n            this.cards.push(card2);\r\n            id++;\r\n        }\r\n\r\n        shuffle(this.cards);\r\n    }\r\n\r\n    getCard(id) {\r\n        for (let i = 0; i < 2 * this.NUM_IMAGES; i++) {\r\n            if (this.cards[i].id === id) {\r\n                return this.cards[i];\r\n            }\r\n        };\r\n    }\r\n\r\n    flipCard(id, imageUp) {\r\n        this.getCard(id).imageUp = imageUp;\r\n    }\r\n\r\n    setCardAsMatched(id, matched) {\r\n        this.getCard(id).matched = matched;\r\n    }\r\n\r\n    cardsHaveIdenticalImages(id1, id2) {\r\n        if (this.getCard(id1).image === this.getCard(id2).image) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default MemoryCards;\r\n","import React, { Component } from 'react';\r\nimport './Game.css';\r\nimport CardView from './CardView';\r\nimport MemoryCards from './MemoryCards';\r\n\r\n\r\nclass Game extends Component {\r\n    state = {};\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onCardClicked = this.onCardClicked.bind(this);\r\n        this.onPlayAgain = this.onPlayAgain.bind(this);\r\n        this.memoryCards = new MemoryCards();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initGame();\r\n    }\r\n\r\n    initGame() {\r\n        this.memoryCards.generateCardSet();\r\n        this.setState({\r\n            turnNo: 1,\r\n            pairsFound: 0,\r\n            numClicksWithinTurn: 0,\r\n            firstId: undefined,\r\n            secondId: undefined\r\n        });\r\n    }\r\n\r\n    getCardViews() {\r\n        const cardViews = this.memoryCards.cards.map(c =>\r\n            <CardView key={c.id}\r\n            id={c.id}\r\n            image={c.image}\r\n            imageUp={c.imageUp}\r\n            matched={c.matched}\r\n            onClick={this.onCardClicked} />\r\n        );\r\n        return cardViews;\r\n    }\r\n\r\n    clearCards(id1, id2) {\r\n        if (this.state.numClicksWithinTurn !== 2) {\r\n            return;\r\n        }\r\n        this.memoryCards.flipCard(this.state.firstId, false);\r\n        this.memoryCards.flipCard(this.state.secondId, false);\r\n        this.setState({\r\n            firstId: undefined,\r\n            secondId: undefined,\r\n            numClicksWithinTurn: 0,\r\n            turnNo: this.state.turnNo + 1\r\n        });\r\n    }\r\n\r\n    onCardClicked(id, image) {\r\n        if (this.state.numClicksWithinTurn === 0 || this.state.numClicksWithinTurn === 2) {\r\n            if (this.state.numClicksWithinTurn === 2) {\r\n                clearTimeout(this.timeout);\r\n                this.clearCards(this.state.firstId, this.state.secondId);\r\n            }\r\n            this.memoryCards.flipCard(id, true);\r\n            this.setState({\r\n                firstId: id,\r\n                numClicksWithinTurn: 1\r\n            });\r\n        } else if (this.state.numClicksWithinTurn === 1) {\r\n            this.memoryCards.flipCard(id, true);\r\n            \r\n            this.setState({\r\n                secondId: id,\r\n                numClicksWithinTurn: 2\r\n            });\r\n\r\n            if (this.memoryCards.cardsHaveIdenticalImages(id, this.state.firstId)) {\r\n                this.memoryCards.setCardAsMatched(this.state.firstId, true);\r\n                this.memoryCards.setCardAsMatched(id, true);\r\n                this.setState({\r\n                    pairsFound: this.state.pairsFound + 1,\r\n                    firstId: undefined,\r\n                    secondId: undefined,\r\n                    turnNo: this.state.turnNo + 1,\r\n                    numClicksWithinTurn: 0\r\n                });\r\n\r\n            } else {\r\n                this.timeout = setTimeout(() => {\r\n                    this.clearCards(this.state.firstId, this.state.secondId);\r\n                }, 5000);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onPlayAgain() {\r\n        this.initGame();\r\n    }\r\n\r\n    render() {\r\n        const cardViews = this.getCardViews();\r\n        let gameStatus = <div className='Game-status'>\r\n            <div>TOURS: {this.state.turnNo}</div>\r\n            <div>PAIRES EN COURS: {this.state.pairsFound}</div>\r\n        </div>;\r\n\r\n        if (this.state.pairsFound === this.memoryCards.NUM_IMAGES) {\r\n            gameStatus = <div className='Game-status'>\r\n                <div>LOKH'TAR OGAR ! JEU FINI BRAVO</div>\r\n                <div>Avec {this.state.turnNo - 1} Tours</div>\r\n                <div><button onClick={this.onPlayAgain}>ON REJOUE ?</button></div></div>;\r\n        }\r\n\r\n        return (\r\n            <div className='Game'>\r\n                <header className='Game-header'>\r\n                    <div className='Game-title'>World Of Warcraft Memory Game !</div>\r\n                </header>\r\n                <div>\r\n                    {gameStatus}\r\n                </div>\r\n                <div className='CardContainer'>\r\n                    {cardViews}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Game';\r\n\r\n\r\n\r\nfunction App() {\r\n    \r\n    return (\r\n        <Game />\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}